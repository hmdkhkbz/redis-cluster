apiVersion: batch/v1
kind: Job
metadata:
  name: redis-cluster-init
  labels:
    app: redis
  annotations:
    "helm.sh/hook": post-install
    "helm.sh/hook-delete-policy": before-hook-creation
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: 600
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: redis-cluster-init
          image: bitnami/kubectl:latest # Or a specific version
          env:
            - name: REDIS_REPLICAS
              value: "{{ .Values.replicaCount | default 6 }}" # Using top-level replicaCount
            - name: RELEASE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: redis-auth
                  key: redis-password
          command:
            - sh
            - -c
            - |
              echo "Waiting for $REDIS_REPLICAS Redis pods in namespace $RELEASE_NAMESPACE to be Running..."
              while [ $(kubectl get pods -n "$RELEASE_NAMESPACE" -l app=redis -o jsonpath='{.items[?(@.status.phase=="Running")].metadata.name}' | wc -w) -lt "$REDIS_REPLICAS" ]; do
                echo "Waiting...";
                sleep 3;
              done

              echo "Checking cluster state..."
              if kubectl exec -n "$RELEASE_NAMESPACE" "redis-0" -- redis-cli -a "$REDIS_PASSWORD" cluster info | grep 'cluster_state:ok'; then
                echo "Cluster already initialized. Exiting."
                exit 0
              fi

              echo "Creating Redis cluster with $REDIS_REPLICAS nodes and 1 replica per master..."
              CLUSTER_NODES=""
              for i in $(seq 0 $((REDIS_REPLICAS - 1))); do
                POD_NAME="redis-$i"
                SERVICE_NAME="redis-headless"
                NAMESPACE="$RELEASE_NAMESPACE"
                IP=$(kubectl get pod -n "$NAMESPACE" "$POD_NAME" -o jsonpath='{.status.podIP}')
                CLUSTER_NODES="$CLUSTER_NODES $IP:{{ .Values.redis.port | default 6379 }}" # Use configured port
              done

              echo "Executing: redis-cli --cluster create $CLUSTER_NODES --cluster-replicas 1"
              FIRST_REDIS_POD=$(kubectl get pods -n "$RELEASE_NAMESPACE" -l app=redis -o jsonpath='{.items[0].metadata.name}')
              if kubectl exec -n "$RELEASE_NAMESPACE" "$FIRST_REDIS_POD" -- redis-cli --cluster create $CLUSTER_NODES -a "$REDIS_PASSWORD" --cluster-replicas 1 --cluster-yes; then
                echo "Redis cluster created successfully."
              else
                echo "Error creating Redis cluster."
                exit 1
              fi
